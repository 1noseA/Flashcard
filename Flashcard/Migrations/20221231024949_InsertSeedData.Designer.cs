// <auto-generated />
using System;
using Flashcard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Flashcard.Migrations
{
    [DbContext(typeof(FlashcardContext))]
    [Migration("20221231024949_InsertSeedData")]
    partial class InsertSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Flashcard.Models.Histories", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("correct_answer_count")
                        .HasColumnType("integer")
                        .HasColumnName("correct_answer_count");

                    b.Property<DateTime>("study_date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("study_date");

                    b.Property<int>("stydy_count")
                        .HasColumnType("integer")
                        .HasColumnName("stydy_count");

                    b.HasKey("HistoryId");

                    b.HasIndex("UserId");

                    b.HasIndex("WordId");

                    b.ToTable("histories");
                });

            modelBuilder.Entity("Flashcard.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "password1",
                            UserName = "user1"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "password2",
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("Flashcard.Models.Words", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WordId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Meaning")
                        .HasColumnType("text")
                        .HasColumnName("meaning");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Word")
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("WordId");

                    b.HasIndex("UserId");

                    b.ToTable("words");

                    b.HasData(
                        new
                        {
                            WordId = 1,
                            Meaning = "meaning1",
                            UserId = 1,
                            Word = "word1"
                        },
                        new
                        {
                            WordId = 2,
                            Meaning = "meaning2",
                            UserId = 1,
                            Word = "word2"
                        },
                        new
                        {
                            WordId = 3,
                            Meaning = "meaning3",
                            UserId = 1,
                            Word = "word3"
                        },
                        new
                        {
                            WordId = 4,
                            Meaning = "meaning4",
                            UserId = 1,
                            Word = "word4"
                        },
                        new
                        {
                            WordId = 5,
                            Meaning = "meaning5",
                            UserId = 1,
                            Word = "word5"
                        });
                });

            modelBuilder.Entity("Flashcard.Models.Histories", b =>
                {
                    b.HasOne("Flashcard.Models.Users", "Users")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flashcard.Models.Words", "Words")
                        .WithMany("Histories")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Flashcard.Models.Words", b =>
                {
                    b.HasOne("Flashcard.Models.Users", "Users")
                        .WithMany("Words")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Flashcard.Models.Users", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Flashcard.Models.Words", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
